import psycopg2
from datetime import datetime, timedelta
import logging
from logging.handlers import RotatingFileHandler
import sys

# Set up logging
log_file = '/tmp/bitcoin_hodls.log'
logger = logging.getLogger('hodls')
logger.setLevel(logging.INFO)
handler = RotatingFileHandler(log_file, maxBytes=1024*1024*1024, backupCount=1)  # 1GB max
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

DURATION = 365
BALANCE = 1

# Establish a database connection
try:
    conn = psycopg2.connect(
        dbname="bitcoin",
        user="abc",
        password="12345",
        host="localhost"
    )
    cursor = conn.cursor()
except psycopg2.Error as e:
    logger.error(f"Error connecting to the database: {e}")
    sys.exit(1)

def latest_transaction_date(version):
    try:
        cursor.execute("SELECT MAX(timestamp) FROM transactions WHERE version = %s;", (version,))
        latest_transaction_date = cursor.fetchone()[0]
        if latest_transaction_date is None:
            return None
        latest_transaction_date = datetime(
            year=latest_transaction_date.year, 
            month=latest_transaction_date.month,
            day=latest_transaction_date.day,
        )
        logger.info(f"Max date from transactions for version {version}: {latest_transaction_date.strftime('%Y-%m-%d')}")
        return latest_transaction_date
    except Exception as e:
        logger.error(f"Error fetching latest transaction date: {e}")
        sys.exit(1)

def latest_timeseries_date(table_name, version):
    try:
        query = f"SELECT MAX(date) FROM {table_name} WHERE version = %s;"
        cursor.execute(query, (version,))
        latest_date = cursor.fetchone()[0]
        if latest_date is None:
            return None
        latest_date = datetime(
            year=latest_date.year, 
            month=latest_date.month,
            day=latest_date.day,
        )
        logger.info(f"Max date from {table_name} for version {version}: {latest_date.strftime('%Y-%m-%d')}")
        return latest_date
    
    except Exception as e:
        logger.error(f"Error fetching latest timeseries date for {table_name}: {e}")
        sys.exit(1)

# Check if version parameter is provided
if len(sys.argv) > 1:
    try:
        version = int(sys.argv[1])
    except ValueError:
        logger.error("Invalid version parameter. Must be an integer.")
        sys.exit(1)
else:
    version = 1

logger.info(f"Running script with version: {version}")

current_latest_transaction_date = latest_transaction_date(version=version)
latest_hodl_date = latest_timeseries_date("hodls", version=version)

if not current_latest_transaction_date:
    logger.info("No transactions found for the specified version, exisiting")
    sys.exit(0)
    

if latest_hodl_date and current_latest_transaction_date:
    start_date = min(latest_hodl_date, current_latest_transaction_date)
else:
    start_date = datetime(2010, 1, 8)
logger.info(f"Start date for iteration: {start_date.strftime('%Y-%m-%d')}")

# Iterate over each week from the start date to the current date
while start_date <= datetime.now():
    try:
        if start_date < (latest_transaction_date(version=version) - timedelta(days=1)):
            query = """
            WITH hodler_count AS (
                SELECT COUNT(DISTINCT address) AS count FROM (
                    SELECT address
                    FROM transactions 
                    WHERE timestamp < %s
                    GROUP BY address
                    HAVING SUM(amount) > %s AND MIN(timestamp) < %s
                ) AS HODLER_ADDRESS
            )
            INSERT INTO hodls (date, hodls, version)
            VALUES (%s, (SELECT count FROM hodler_count), %s)
            ON CONFLICT (date) DO UPDATE SET hodls = EXCLUDED.hodls;
            """
            cursor.execute(query, (start_date, BALANCE, start_date - timedelta(days=DURATION), start_date, version))
            conn.commit()
    except Exception as e:
        logger.error(f"Error during iteration for date {start_date.strftime('%Y-%m-%d')}: {e}")
        conn.rollback()

    start_date += timedelta(weeks=1)

# Close the database connection
cursor.close()
conn.close()
